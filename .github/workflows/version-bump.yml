name: Version Bump and Tag

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get PR labels from commit message
        id: get_labels
        run: |
          # Get the commit message of the latest merge commit
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Extract PR labels if they exist in the commit message
          # GitHub auto-includes labels in merge commits
          VERSION_TYPE="patch"  # Default to patch

          if echo "$COMMIT_MSG" | grep -q "\[version:major\]"; then
            VERSION_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -q "\[version:minor\]"; then
            VERSION_TYPE="minor"
          elif echo "$COMMIT_MSG" | grep -q "\[version:patch\]"; then
            VERSION_TYPE="patch"
          fi

          echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $VERSION_TYPE"

      - name: Bump version
        run: |
          VERSION_TYPE=${{ steps.get_labels.outputs.type }}
          npm version $VERSION_TYPE --no-git-tag-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }} [skip ci]"
          git push origin master

      - name: Create and push Git tag
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create GitHub Release (optional)
        run: |
          gh release create "v${{ env.NEW_VERSION }}" \
            --title "Release v${{ env.NEW_VERSION }}" \
            --notes "Automated release v${{ env.NEW_VERSION }}" || echo "GitHub CLI not available or release already exists"
